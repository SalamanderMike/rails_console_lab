LOG OF COMMANDS
1)
me = Student.new
me = Student.new(:first_name => "John", :last_name => "El'Pollo", :age => 28)
2)
me.save
3)
me = Student.find(1)
me.first_name = "Taco"
me.save
4)
me = Student.find_by_first_name("Taco")
me.destroy
5)
/models/student.rb -validates_uniqueness_of :last_name
6)
/models/student.rb -validates_length_of :last_name, :minimum => 4
/models/student.rb -validates_length_of :first_name, :minimum => 4
7)
/models/student.rb -validates_presence_of :last_name
/models/student.rb -validates_presence_of :first_name
8)
validates :first_name, :presence => true, :length => 4, :uniqueness => true
validates :last_name, :presence => true, :length => 4, :uniqueness => true
9)
me = Student.create(:first_name => "John", :last_name => "Doe", :age => 33)
10)
me.valid?
11)
me.errors.size
12)
me = Student.find(2).update_attributes(:last_name => "Doesmith", :first_name => "Jonathan")
13)
me.errors.clear
14)
me = Student.create(:first_name => "Jonathan", :last_name => "Doesmith", :age => 33)
15)
me = Student.all
16)
me = Student.find_by_id(128)
17)
me = Student.first
18)
me = Student.last
19)
me = Student.find_by_last_name("Doesmith")
20)
me = Student.all.offset(2).limit(5).order(last_name: :asc)
21)
Student.find_by_last_name("Doesmith").destroy


# rails console stopped working, so I could not finish testing/developing these ideas

Bonus 1)
validates :first_name, :last_name :presence => true,
                                  :length => 4,
                                  :uniqueness => true,
                                  :format => {:with => /\A[A-Z][a-zA-Z]+$/,
                                              :message => "Name must Capitalized and contain only letters"}


Bonus 2)
Custom Validation Class:

class FullName < ActiveModel::Validator
  def validate(record)
# rails console stopped working, so I could not finish testing/developing this idea
    if [:fields.join].any?{|field| (field === evilNames) }
      record.errors[:base] << "This person is evil"
    end
  end
end
















